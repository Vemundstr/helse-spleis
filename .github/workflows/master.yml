name: Bygg og deploy

on:
  push:
    branches:
    - master
env:
    APP: spleis
    TEAM: tbd
    IMAGE: docker.pkg.github.com/${{ github.repository }}/spleis
jobs:
  set_version:
    runs-on: ubuntu-latest
    steps:
    - name: create docker tag
      run: echo ::set-env name=TAG::$(echo ${{ github.sha }} | cut -c1-7)
    outputs:
      tag: ${{ env.TAG }}

  build:
    runs-on: ubuntu-latest
    needs: set_version
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-java@v1
      with:
        java-version: '12.x'
    - name: test and build
      run: ./gradlew test build
      env:
        ORG_GRADLE_PROJECT_githubUser: x-access-token
        ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
    - name: build docker image
      run: docker build . --pull -t ${{ env.IMAGE }}:${{ needs.set_version.outputs.tag }}
    - name: push docker image
      run: |
        echo "$GITHUB_TOKEN" | docker login --username "$GITHUB_REPOSITORY" --password-stdin https://docker.pkg.github.com
        docker push ${{ env.IMAGE }}:${{ needs.set_version.outputs.tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  snyk:
    runs-on: ubuntu-latest
    needs: [set_version, build]
    steps:
    - uses: actions/checkout@v1
    - name: Gradle vulnerability check
      uses: snyk/actions/gradle-jdk12@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        ORG_GRADLE_PROJECT_githubUser: x-access-token
        ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: --all-sub-projects --org=tbd-ty7 --fail-on=all
        command: monitor
    - name: Docker image vulnerability check
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ env.IMAGE }}:${{ needs.set_version.outputs.tag }}
        args: --file=Dockerfile --org=tbd-ty7 --fail-on=all --exclude-base-image-vulns

  deploy_dev:
    runs-on: ubuntu-latest
    needs: [set_version, build, snyk]
    steps:
    - name: deploy to dev
      uses: nais/deploy/actions/deploy@v1
      env:
        APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
        CLUSTER: dev-fss
        ENVIRONMENT: dev-fss
        RESOURCE: deploy/dev.yml
        WAIT: false
        VAR: "image=${{env.IMAGE}},tag=${{ needs.set_version.outputs.tag }},team=${{env.TEAM}},app=${{env.APP}}"

  deploy_prod:
    runs-on: ubuntu-latest
    needs: [set_version, deploy_dev]
    steps:
    - name: deploy to prod
      uses: nais/deploy/actions/deploy@v1
      env:
        APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
        CLUSTER: prod-fss
        ENVIRONMENT: prod-fss
        RESOURCE: deploy/prod.yml
        WAIT: false
        VAR: "image=${{env.IMAGE}},tag=${{ needs.set_version.outputs.tag }},team=${{env.TEAM}},app=${{env.APP}}"



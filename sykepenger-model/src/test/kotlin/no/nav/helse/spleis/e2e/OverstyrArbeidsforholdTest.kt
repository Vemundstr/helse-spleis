package no.nav.helse.spleis.e2e

import no.nav.helse.ForventetFeil
import no.nav.helse.hendelser.*
import no.nav.helse.testhelpers.desember
import no.nav.helse.testhelpers.januar
import no.nav.helse.칮konomi.Prosentdel.Companion.prosent
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import java.time.LocalDate

internal class OverstyrArbeidsforholdTest : AbstractEndToEndTest() {
    @ForventetFeil("skal fikses i morgen 游뗵")
    @Test
    fun `fjerner et ghost tilfelle ved hjelp av overstyring`() {
        h친ndterSykmelding(Sykmeldingsperiode(1.januar, 31.januar, 100.prosent))
        h친ndterS칮knad(S칮knad.S칮knadsperiode.Sykdom(1.januar, 31.januar, 100.prosent))
        h친ndterInntektsmelding(listOf(1.januar til 16.januar))
        h친ndterYtelser(1.vedtaksperiode)
        h친ndterVilk친rsgrunnlag(
            1.vedtaksperiode, arbeidsforhold = listOf(
                Vilk친rsgrunnlag.Arbeidsforhold(a1.toString(), LocalDate.EPOCH, null),
                Vilk친rsgrunnlag.Arbeidsforhold(a2.toString(), 1.desember(2017), null)
            )
        )
        h친ndterYtelser(1.vedtaksperiode)
        h친ndterSimulering(1.vedtaksperiode)
        val skj칝ringstidspunkt = inspekt칮r.skj칝ringstidspunkt(1.vedtaksperiode)
        assertEquals(listOf(a1.toString(), a2.toString()).toList(), person.orgnummereMedRelevanteArbeidsforhold(skj칝ringstidspunkt).toList())
        h친ndterOverstyrArbeidsforhold(skj칝ringstidspunkt, listOf(OverstyrArbeidsforhold.ArbeidsforholdOverstyrt(a2, false)))
        assertEquals(listOf(a1.toString()), person.orgnummereMedRelevanteArbeidsforhold(skj칝ringstidspunkt))
    }
}

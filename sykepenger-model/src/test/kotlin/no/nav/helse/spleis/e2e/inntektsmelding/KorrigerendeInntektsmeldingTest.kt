package no.nav.helse.spleis.e2e.inntektsmelding

import no.nav.helse.assertForventetFeil
import no.nav.helse.februar
import no.nav.helse.hendelser.Inntektsmelding
import no.nav.helse.hendelser.S칮knad.S칮knadsperiode.Sykdom
import no.nav.helse.hendelser.somPeriode
import no.nav.helse.hendelser.til
import no.nav.helse.inspectors.inspekt칮r
import no.nav.helse.januar
import no.nav.helse.mars
import no.nav.helse.person.TilstandType.AVSLUTTET
import no.nav.helse.person.TilstandType.AVSLUTTET_UTEN_UTBETALING
import no.nav.helse.person.TilstandType.AVVENTER_BLOKKERENDE_PERIODE
import no.nav.helse.person.TilstandType.AVVENTER_GODKJENNING
import no.nav.helse.person.TilstandType.AVVENTER_HISTORIKK
import no.nav.helse.person.TilstandType.AVVENTER_HISTORIKK_REVURDERING
import no.nav.helse.person.TilstandType.AVVENTER_VILK칀RSPR칒VING
import no.nav.helse.person.TilstandType.AVVENTER_VILK칀RSPR칒VING_REVURDERING
import no.nav.helse.person.TilstandType.TIL_INFOTRYGD
import no.nav.helse.person.aktivitetslogg.Varselkode.RV_IM_24
import no.nav.helse.person.aktivitetslogg.Varselkode.RV_IM_3
import no.nav.helse.person.aktivitetslogg.Varselkode.RV_IM_4
import no.nav.helse.person.aktivitetslogg.Varselkode.RV_IV_2
import no.nav.helse.person.nullstillTilstandsendringer
import no.nav.helse.spleis.e2e.AbstractEndToEndTest
import no.nav.helse.spleis.e2e.assertForkastetPeriodeTilstander
import no.nav.helse.spleis.e2e.assertFunksjonellFeil
import no.nav.helse.spleis.e2e.assertIngenVarsel
import no.nav.helse.spleis.e2e.assertSisteTilstand
import no.nav.helse.spleis.e2e.assertTilstander
import no.nav.helse.spleis.e2e.assertVarsel
import no.nav.helse.spleis.e2e.forlengVedtak
import no.nav.helse.spleis.e2e.h친ndterInntektsmelding
import no.nav.helse.spleis.e2e.h친ndterSimulering
import no.nav.helse.spleis.e2e.h친ndterS칮knad
import no.nav.helse.spleis.e2e.h친ndterUtbetalingsgodkjenning
import no.nav.helse.spleis.e2e.h친ndterUtbetalt
import no.nav.helse.spleis.e2e.h친ndterVilk친rsgrunnlag
import no.nav.helse.spleis.e2e.h친ndterYtelser
import no.nav.helse.spleis.e2e.nyPeriode
import no.nav.helse.spleis.e2e.nyttVedtak
import no.nav.helse.spleis.e2e.tilGodkjenning
import no.nav.helse.utbetalingstidslinje.Arbeidsgiverperiode
import no.nav.helse.utbetalingstidslinje.Utbetalingsdag
import no.nav.helse.칮konomi.Inntekt.Companion.INGEN
import no.nav.helse.칮konomi.Inntekt.Companion.daglig
import no.nav.helse.칮konomi.Inntekt.Companion.m친nedlig
import no.nav.helse.칮konomi.Prosentdel.Companion.prosent
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Test

internal class KorrigerendeInntektsmeldingTest: AbstractEndToEndTest() {

    @Test
    fun `Kaster ut periode til godkjenning som f친r korrigerende IM med avvik`() {
        tilGodkjenning(1.januar, 31.januar, ORGNUMMER)
        nullstillTilstandsendringer()
        h친ndterInntektsmelding(listOf(1.januar til 16.januar), beregnetInntekt = INNTEKT * 2)
        assertForventetFeil(
            forklaring = "Kastes ikke ut",
            n친 = {
                assertVarsel(RV_IV_2, 1.vedtaksperiode.filter())
                assertTilstander(1.vedtaksperiode, AVVENTER_GODKJENNING, AVVENTER_BLOKKERENDE_PERIODE, AVVENTER_HISTORIKK)
            },
            칮nsket = {
                assertFunksjonellFeil(RV_IV_2, 1.vedtaksperiode.filter())
                assertForkastetPeriodeTilstander(1.vedtaksperiode, AVVENTER_GODKJENNING, AVVENTER_BLOKKERENDE_PERIODE, AVVENTER_HISTORIKK, TIL_INFOTRYGD)
            }
        )
    }

    @Test
    fun `Feil periode f친r melding om avvik, og burde kastes ut fremfor 친 bli varsel`() {
        h친ndterS칮knad(Sykdom(1.januar, 16.januar, 100.prosent))
        h친ndterS칮knad(Sykdom(17.januar, 31.januar, 100.prosent))
        h친ndterInntektsmelding(listOf(1.januar til 16.januar))
        h친ndterVilk친rsgrunnlag(2.vedtaksperiode)
        h친ndterYtelser(2.vedtaksperiode)
        h친ndterSimulering(2.vedtaksperiode)
        h친ndterS칮knad(Sykdom(1.februar, 28.februar, 100.prosent))

        assertSisteTilstand(1.vedtaksperiode, AVSLUTTET_UTEN_UTBETALING)
        assertSisteTilstand(2.vedtaksperiode, AVVENTER_GODKJENNING)
        assertSisteTilstand(3.vedtaksperiode, AVVENTER_BLOKKERENDE_PERIODE)

        nullstillTilstandsendringer()
        h친ndterInntektsmelding(listOf(1.januar til 16.januar), beregnetInntekt = INNTEKT * 2)

        assertForventetFeil(
            forklaring = "Feil periode f친r varsel, og ikke bare det, den burde jo v칝rt error og alt blitt forkastet 游땱",
            n친 = {
                assertVarsel(RV_IV_2, 3.vedtaksperiode.filter())
                assertTilstander(1.vedtaksperiode, AVSLUTTET_UTEN_UTBETALING)
                assertTilstander(2.vedtaksperiode, AVVENTER_GODKJENNING, AVVENTER_BLOKKERENDE_PERIODE, AVVENTER_HISTORIKK)
                assertTilstander(3.vedtaksperiode, AVVENTER_BLOKKERENDE_PERIODE)
            },
            칮nsket = {
                assertFunksjonellFeil(RV_IV_2, 2.vedtaksperiode.filter())
                assertForkastetPeriodeTilstander(1.vedtaksperiode, AVSLUTTET_UTEN_UTBETALING, TIL_INFOTRYGD)
                assertForkastetPeriodeTilstander(2.vedtaksperiode, AVVENTER_GODKJENNING, AVVENTER_BLOKKERENDE_PERIODE, TIL_INFOTRYGD)
                assertForkastetPeriodeTilstander(3.vedtaksperiode, AVVENTER_BLOKKERENDE_PERIODE, TIL_INFOTRYGD)
            }
        )
    }

    @Test
    fun `Avsluttet vedtaksperiode skal ikke f친 varsel ved helt lik korrigerende inntektsmelding`() {
        nyttVedtak(1.januar, 31.januar)

        h친ndterInntektsmelding(listOf(1.januar til 16.januar),)

        assertIngenVarsel(RV_IM_4)
    }

    @Test
    fun `Avsluttet vedtaksperiode skal ikke f친 varsel ved korrigerende inntektsmelding med endring i agp`() {
        nyttVedtak(1.januar, 31.januar)

        h친ndterInntektsmelding(listOf(2.januar til 17.januar),)

        assertVarsel(RV_IM_24)
    }

    @Test
    fun `Avsluttet vedtaksperiode skal ikke f친 varsel ved korrigerende inntektsmelding med endring i refusjonsbel칮p`() {
        nyttVedtak(1.januar, 31.januar)

        h친ndterInntektsmelding(
            listOf(1.januar til 16.januar),
            refusjon = Inntektsmelding.Refusjon(2000.m친nedlig, null, emptyList()),
        )

        assertVarsel(RV_IM_4)
    }

    @Test
    fun `bare varsel p친 f칮rste periode`() {
        nyPeriode(1.januar til 16.januar)
        nyttVedtak(17.januar, 31.januar, arbeidsgiverperiode = listOf(1.januar til 16.januar))
        forlengVedtak(1.februar, 28.februar)
        forlengVedtak(1.mars, 31.mars)
        h친ndterInntektsmelding(listOf(1.januar til 16.januar),)

        assertIngenVarsel(RV_IM_4, 1.vedtaksperiode.filter())
        assertVarsel(RV_IM_4, 2.vedtaksperiode.filter())
        assertIngenVarsel(RV_IM_4, 3.vedtaksperiode.filter())
        assertIngenVarsel(RV_IM_4, 4.vedtaksperiode.filter())
    }

    @Test
    fun `Korrigerende inntektsmelding som strekker agp tilbake skal ha varsel`() {
        nyttVedtak(2.januar, 31.januar)

        h친ndterInntektsmelding(listOf(1.januar til 16.januar),)

        assertEquals(1.januar til 16.januar, inspekt칮r.arbeidsgiverperiode(1.vedtaksperiode))
        assertVarsel(RV_IM_24, 1.vedtaksperiode.filter())
        assertSisteTilstand(1.vedtaksperiode, AVVENTER_VILK칀RSPR칒VING_REVURDERING)

        h친ndterVilk친rsgrunnlag(1.vedtaksperiode)
        h친ndterYtelser(1.vedtaksperiode)
        h친ndterSimulering(1.vedtaksperiode)
        h친ndterUtbetalingsgodkjenning(1.vedtaksperiode)
        h친ndterUtbetalt()

        assertSisteTilstand(1.vedtaksperiode, AVSLUTTET)
        val utbetalingstidslinje = inspekt칮r.vedtaksperioder(1.vedtaksperiode).inspekt칮r.utbetalingstidslinje
        assertTrue(utbetalingstidslinje.subset(1.januar til 16.januar).all {
            it.칮konomi.inspekt칮r.arbeidsgiverbel칮p == INGEN && it is Utbetalingsdag.ArbeidsgiverperiodeDag
        })
        assertEquals(1431.daglig, utbetalingstidslinje[17.januar].칮konomi.inspekt칮r.arbeidsgiverbel칮p)

        assertEquals(1.januar til 31.januar, inspekt칮r.vedtaksperioder(1.vedtaksperiode).periode())
        assertEquals("USSSSHH SSSSSHH SSSSSHH SSSSSHH SSS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
        assertEquals("USSSSHH SSSSSHH SSSSSHH SSSSSHH SSS", inspekt칮r.vedtaksperiodeSykdomstidslinje(1.vedtaksperiode).toShortString())
    }

    @Test
    fun `Korrigerende inntektsmelding med lik agp skal ikke ha varsel`() {
        nyttVedtak(1.januar, 31.januar)
        h친ndterInntektsmelding(listOf(1.januar til 16.januar),)
        assertEquals(1.januar til 16.januar, inspekt칮r.arbeidsgiverperiode(1.vedtaksperiode))
        assertIngenVarsel(RV_IM_24, 1.vedtaksperiode.filter())
        assertSisteTilstand(1.vedtaksperiode, AVVENTER_HISTORIKK_REVURDERING)
        h친ndterYtelser(1.vedtaksperiode)
        h친ndterUtbetalingsgodkjenning(1.vedtaksperiode)
        h친ndterUtbetalt()
        assertSisteTilstand(1.vedtaksperiode, AVSLUTTET)
        val utbetalingstidslinje = inspekt칮r.vedtaksperioder(1.vedtaksperiode).inspekt칮r.utbetalingstidslinje
        assertTrue(utbetalingstidslinje.subset(1.januar til 16.januar).all {
            it.칮konomi.inspekt칮r.arbeidsgiverbel칮p == INGEN && it is Utbetalingsdag.ArbeidsgiverperiodeDag
        })
        assertEquals(1431.daglig, utbetalingstidslinje[17.januar].칮konomi.inspekt칮r.arbeidsgiverbel칮p)
    }

    @Test
    fun `Korrigerende inntektsmelding som strekker agp fremover`() {
        nyttVedtak(1.januar, 31.januar)
        h친ndterInntektsmelding(listOf(2.januar til 17.januar),)
        assertEquals(2.januar til 17.januar, inspekt칮r.arbeidsgiverperiode(1.vedtaksperiode))
        assertVarsel(RV_IM_24, 1.vedtaksperiode.filter())
        assertSisteTilstand(1.vedtaksperiode, AVVENTER_VILK칀RSPR칒VING_REVURDERING)
        h친ndterVilk친rsgrunnlag(1.vedtaksperiode)
        h친ndterYtelser(1.vedtaksperiode)
        h친ndterSimulering(1.vedtaksperiode)
        h친ndterUtbetalingsgodkjenning(1.vedtaksperiode)
        h친ndterUtbetalt()
        assertSisteTilstand(1.vedtaksperiode, AVSLUTTET)
        val utbetalingstidslinje = inspekt칮r.vedtaksperioder(1.vedtaksperiode).inspekt칮r.utbetalingstidslinje
        assertTrue(utbetalingstidslinje[1.januar] is Utbetalingsdag.Arbeidsdag)
        assertEquals(0.daglig, utbetalingstidslinje[1.januar].칮konomi.inspekt칮r.arbeidsgiverbel칮p)
        assertTrue(utbetalingstidslinje.subset(2.januar til 17.januar).all {
            it.칮konomi.inspekt칮r.arbeidsgiverbel칮p == INGEN && it is Utbetalingsdag.ArbeidsgiverperiodeDag
        })
        assertEquals(1431.daglig, utbetalingstidslinje[18.januar].칮konomi.inspekt칮r.arbeidsgiverbel칮p)

        assertEquals(1.januar til 31.januar, inspekt칮r.vedtaksperioder(1.vedtaksperiode).periode())
        assertEquals("ASSSSHH SSSSSHH SSSSSHH SSSSSHH SSS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
        assertEquals("ASSSSHH SSSSSHH SSSSSHH SSSSSHH SSS", inspekt칮r.vedtaksperiodeSykdomstidslinje(1.vedtaksperiode).toShortString())
    }

    @Test
    fun `Antall dager mellom opplyst agp og gammel agp er mer enn 10`()  {
        nyttVedtak(1.januar, 31.januar)
        forlengVedtak(1.februar, 28.februar)
        forlengVedtak(1.mars, 31.mars)
        h친ndterInntektsmelding(listOf(1.mars til 16.mars),)
        assertEquals("SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSH", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
        assertSisteTilstand(1.vedtaksperiode, AVSLUTTET)
        assertSisteTilstand(2.vedtaksperiode, AVSLUTTET)
        assertSisteTilstand(3.vedtaksperiode, AVVENTER_HISTORIKK_REVURDERING)
        h친ndterYtelser(3.vedtaksperiode)
        h친ndterUtbetalingsgodkjenning(3.vedtaksperiode)
        h친ndterUtbetalt()
        assertVarsel(RV_IM_24, 3.vedtaksperiode.filter())
    }

    @Test
    fun `Antall dager mellom opplyst agp og gammel agp er mindre enn 10`()  {
        nyttVedtak(10.januar, 31.januar)
        forlengVedtak(1.februar, 28.februar)
        forlengVedtak(1.mars, 31.mars)
        h친ndterInntektsmelding(listOf(1.februar til 16.februar),)
        assertEquals("AAARR AAAAARR AAAAARR AAASSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSH", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
        h친ndterYtelser(1.vedtaksperiode)
        h친ndterSimulering(1.vedtaksperiode)
        h친ndterUtbetalingsgodkjenning(1.vedtaksperiode)
        h친ndterUtbetalt()
        assertSisteTilstand(2.vedtaksperiode, AVVENTER_VILK칀RSPR칒VING_REVURDERING)
        h친ndterVilk친rsgrunnlag(2.vedtaksperiode)
        h친ndterYtelser(2.vedtaksperiode)
        h친ndterSimulering(2.vedtaksperiode)
        h친ndterUtbetalingsgodkjenning(2.vedtaksperiode)
        h친ndterUtbetalt()
        val overstyringerIgangsatt = observat칮r.overstyringIgangsatt.map { it.친rsak }
        assertEquals(listOf("KORRIGERT_INNTEKTSMELDING_ARBEIDSGIVERPERIODE", "KORRIGERT_INNTEKTSMELDING_ARBEIDSGIVERPERIODE"), overstyringerIgangsatt)
        assertVarsel(RV_IM_24, 1.vedtaksperiode.filter())
    }

    @Test
    fun `her er det et gap mellom f칮rste og andre vedtaksperiode og mindre enn 10 dager mellom agps`() {
        nyttVedtak(10.januar, 29.januar)
        nyttVedtak(1.februar, 28.februar)
        assertSisteTilstand(1.vedtaksperiode, AVSLUTTET)
        assertSisteTilstand(2.vedtaksperiode, AVSLUTTET)
        h친ndterInntektsmelding(listOf(1.februar til 16.februar),)
        assertEquals("SSSHH SSSSSHH SSSSSHH S??SSHH SSSSSHH SSSSSHH SSSSSHH SSS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
        assertSisteTilstand(1.vedtaksperiode, AVSLUTTET)
        assertSisteTilstand(2.vedtaksperiode, AVVENTER_HISTORIKK_REVURDERING)
    }

    @Test
    fun `Antall dager mellom opplyst agp og gammel agp er mindre enn 10 - flere perioder f칮r korrigerte dager`() {
        nyttVedtak(10.januar, 30.januar)
        forlengVedtak(31.januar, 31.januar)
        forlengVedtak(1.februar, 28.februar)
        h친ndterInntektsmelding(listOf(1.februar til 16.februar),)
        assertEquals("AAARR AAAAARR AAAAARR AAASSHH SSSSSHH SSSSSHH SSSSSHH SSS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
        h친ndterYtelser(1.vedtaksperiode)
        h친ndterSimulering(1.vedtaksperiode)
        h친ndterUtbetalingsgodkjenning(1.vedtaksperiode)
        h친ndterUtbetalt()

        h친ndterVilk친rsgrunnlag(2.vedtaksperiode)
        h친ndterYtelser(2.vedtaksperiode)
        h친ndterSimulering(2.vedtaksperiode)
        h친ndterUtbetalingsgodkjenning(2.vedtaksperiode)
        h친ndterUtbetalt()

        assertSisteTilstand(3.vedtaksperiode, AVVENTER_VILK칀RSPR칒VING_REVURDERING)
        h친ndterVilk친rsgrunnlag(3.vedtaksperiode)
        h친ndterYtelser(3.vedtaksperiode)
        h친ndterSimulering(3.vedtaksperiode)
        h친ndterUtbetalingsgodkjenning(3.vedtaksperiode)
        h친ndterUtbetalt()
        assertSisteTilstand(2.vedtaksperiode, AVSLUTTET)
        val overstyringerIgangsatt = observat칮r.overstyringIgangsatt.map { it.친rsak }
        assertEquals(listOf("KORRIGERT_INNTEKTSMELDING_ARBEIDSGIVERPERIODE", "KORRIGERT_INNTEKTSMELDING_ARBEIDSGIVERPERIODE", "KORRIGERT_INNTEKTSMELDING_ARBEIDSGIVERPERIODE"), overstyringerIgangsatt)
        assertVarsel(RV_IM_24, 1.vedtaksperiode.filter())
    }

    @Test
    fun `Endring i b친de dager og inntekt`() {
        nyttVedtak(1.januar, 31.januar)
        h친ndterInntektsmelding(listOf(15.januar til 31.januar), beregnetInntekt = INNTEKT * 1.1,)
        h친ndterVilk친rsgrunnlag(1.vedtaksperiode)
        h친ndterYtelser(1.vedtaksperiode)
        h친ndterSimulering(1.vedtaksperiode)
        h친ndterUtbetalingsgodkjenning(1.vedtaksperiode)
        h친ndterUtbetalt()
        val overstyringerIgangsatt = observat칮r.overstyringIgangsatt.map { it.친rsak }
        assertEquals(listOf("KORRIGERT_INNTEKTSMELDING_ARBEIDSGIVERPERIODE"), overstyringerIgangsatt)
        assertVarsel(RV_IM_24, 1.vedtaksperiode.filter())
        assertEquals(INNTEKT * 1.1, inspekt칮r.vilk친rsgrunnlag(1.vedtaksperiode)!!.inspekt칮r.sykepengegrunnlag.inspekt칮r.omregnet칀rsinntekt)
    }

    @Test
    fun `Endring i bare inntekt`() {
        nyttVedtak(1.januar, 31.januar)
        h친ndterInntektsmelding(listOf(1.januar til 16.januar), beregnetInntekt = INNTEKT * 1.1,)
        h친ndterYtelser(1.vedtaksperiode)
        h친ndterSimulering(1.vedtaksperiode)
        h친ndterUtbetalingsgodkjenning(1.vedtaksperiode)
        h친ndterUtbetalt()

        val overstyringerIgangsatt = observat칮r.overstyringIgangsatt.map { it.친rsak }
        assertEquals(listOf("KORRIGERT_INNTEKTSMELDING_ARBEIDSGIVERPERIODE", "KORRIGERT_INNTEKTSMELDING_INNTEKTSOPPLYSNINGER"), overstyringerIgangsatt)
        assertVarsel(RV_IM_4, 1.vedtaksperiode.filter())
    }

    @Test
    fun `Endring i siste del av agp`() {
        h친ndterS칮knad(Sykdom(1.januar, 5.januar, 100.prosent))
        nyttVedtak(10.januar, 31.januar)
        val agpF칮r = inspekt칮r.arbeidsgiver.arbeidsgiverperiode(10.januar til 31.januar)
        h친ndterInntektsmelding(listOf(12.januar til 28.januar), avsendersystem = Inntektsmelding.Avsendersystem.ALTINN,)
        val agpEtter = inspekt칮r.arbeidsgiver.arbeidsgiverperiode(10.januar til 31.januar)

        assertEquals(Arbeidsgiverperiode(listOf(1.januar til 5.januar, 10.januar til 26.januar)), agpF칮r)
        assertEquals(Arbeidsgiverperiode(listOf(1.januar til 5.januar, 12.januar til 28.januar)), agpEtter)

        assertVarsel(RV_IM_24, 2.vedtaksperiode.filter())

        h친ndterVilk친rsgrunnlag(2.vedtaksperiode)
        h친ndterYtelser(2.vedtaksperiode)
        h친ndterSimulering(2.vedtaksperiode)
        h친ndterUtbetalingsgodkjenning(2.vedtaksperiode)
        h친ndterUtbetalt()
        assertVarsel(RV_IM_3, 2.vedtaksperiode.filter())
    }

    @Test
    fun `arbeidsgiver korrigerer AGP ved 친 stykke den opp`() {
        nyttVedtak(1.januar, 31.januar)
        h친ndterInntektsmelding(listOf(1.januar til 15.januar, 20.januar.somPeriode()),)
        assertEquals("SSSSSHH SSSSSHH SAAAAHH SSSSSHH SSS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
        assertVarsel(RV_IM_24, 1.vedtaksperiode.filter())
    }

    @Test
    fun `arbeidsgiver korrigerer AGP men f칮rste og siste dag er lik`() {
        nyttVedtak(1.januar, 31.januar, arbeidsgiverperiode = listOf(1.januar til 10.januar, 15.januar til 21.januar))
        h친ndterInntektsmelding(listOf(1.januar til 8.januar, 13.januar til 21.januar),)
        assertEquals("SSSSSHH SAAAAGG SSSSSHH SSSSSHH SSS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
        assertVarsel(RV_IM_24, 1.vedtaksperiode.filter())
    }

    @Test
    fun `korrigert agp i avventer_godkjenning`() {
        tilGodkjenning(1.januar, 31.januar, a1, beregnetInntekt = INNTEKT)
        assertSisteTilstand(1.vedtaksperiode, AVVENTER_GODKJENNING)
        h친ndterInntektsmelding(listOf(5.januar til 20.januar),)
        assertSisteTilstand(1.vedtaksperiode, AVVENTER_VILK칀RSPR칒VING)
        assertVarsel(RV_IM_24, 1.vedtaksperiode.filter())
        assertEquals("AAAASHH SSSSSHH SSSSSHH SSSSSHH SSS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
    }

    @Test
    fun `forlengelse til godkjenning - korrigerende agp mindre enn ti dager fra forrige`() {
        nyttVedtak(10.januar, 31.januar)
        nyPeriode(1.februar til 28.februar)
        h친ndterYtelser(2.vedtaksperiode)
        h친ndterSimulering(2.vedtaksperiode)

        h친ndterInntektsmelding(listOf(1.februar til 16.februar),)

        assertEquals("AAARR AAAAARR AAAAARR AAASSHH SSSSSHH SSSSSHH SSSSSHH SSS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
        assertSisteTilstand(1.vedtaksperiode, AVVENTER_HISTORIKK_REVURDERING)
        assertSisteTilstand(2.vedtaksperiode, AVVENTER_BLOKKERENDE_PERIODE)
        assertVarsel(RV_IM_24, 1.vedtaksperiode.filter())
    }

    @Test
    fun `forlengelse til godkjenning - korrigerende agp mer enn ti dager fra forrige`() {
        nyttVedtak(1.januar, 31.januar)
        nyPeriode(1.februar til 28.februar)
        h친ndterYtelser(2.vedtaksperiode)
        h친ndterSimulering(2.vedtaksperiode)
        h친ndterInntektsmelding(listOf(1.februar til 16.februar),)

        assertEquals("SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSSSSHH SSS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
        assertSisteTilstand(1.vedtaksperiode, AVSLUTTET)
        assertSisteTilstand(2.vedtaksperiode, AVVENTER_HISTORIKK)
        assertVarsel(RV_IM_24, 2.vedtaksperiode.filter())
    }
}
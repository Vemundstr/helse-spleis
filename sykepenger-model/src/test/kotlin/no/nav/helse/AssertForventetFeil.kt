package no.nav.helse

import java.lang.reflect.Method
import org.junit.jupiter.api.assertThrows
import org.junit.jupiter.api.extension.ExtendWith
import org.junit.jupiter.api.extension.ExtensionContext
import org.junit.jupiter.api.extension.InvocationInterceptor
import org.junit.jupiter.api.extension.ReflectiveInvocationContext
import org.junit.platform.commons.support.AnnotationSupport

private const val √ònsketOppf√∏rsel = "‚úÖ Koden oppf√∏rer seg n√• som √∏nsket! Fjern bruken av 'assertForventetFeil', og behold kun assertions for √∏nsket oppf√∏rsel ‚úÖ"
private const val FeilITestkode = "‚ò†Ô∏èÔ∏è Feil i testkoden, feiler ikke p√• assertions ‚ò†Ô∏èÔ∏è"

private fun Throwable.h√•ndterN√•Oppf√∏rselFeil(har√ònsketOppf√∏rsel: Boolean) {
    if (har√ònsketOppf√∏rsel) throw AssertionError(√ònsketOppf√∏rsel)
    if (this is AssertionError) throw AssertionError("‚ö†Ô∏è Koden har endret n√•-oppf√∏rsel, men ikke til √∏nsket oppf√∏rsel ‚ö†Ô∏èÔ∏èÔ∏è", this)
    throw AssertionError(FeilITestkode, this)
}

private fun Throwable.h√•ndter√ònsketOppf√∏rselFeil(forklaring: String?)= when (this) {
    is AssertionError -> println("‚òπÔ∏è Det er kjent at vi ikke har √∏nsket oppf√∏rsel for ${forklaring?:"denne testen"} ‚òπÔ∏èÔ∏è")
    else -> throw AssertionError(FeilITestkode, this)
}

internal fun assertForventetFeil(forklaring: String? = null, n√•: () -> Unit, √∏nsket: () -> Unit) {
    runCatching(n√•).exceptionOrNull()?.h√•ndterN√•Oppf√∏rselFeil(har√ònsketOppf√∏rsel = runCatching(√∏nsket).isSuccess)
    assertThrows<Throwable>(√ònsketOppf√∏rsel) { √∏nsket() }.h√•ndter√ònsketOppf√∏rselFeil(forklaring)
}

@Target(AnnotationTarget.FUNCTION)
@Retention(AnnotationRetention.RUNTIME)
@ExtendWith(FeilerMedH√•ndterInntektsmeldingOppdeltInterceptor::class)
internal annotation class FeilerMedH√•ndterInntektsmeldingOppdelt(val fordi: String)

private class FeilerMedH√•ndterInntektsmeldingOppdeltInterceptor: InvocationInterceptor {
    override fun interceptTestMethod(
        invocation: InvocationInterceptor.Invocation<Void>,
        invocationContext: ReflectiveInvocationContext<Method>,
        extensionContext: ExtensionContext
    ) {
        if (Toggle.H√•ndterInntektsmeldingOppdelt.enabled) {
            assertThrows<Throwable> { invocation.proceed() }
            val fordi = AnnotationSupport.findAnnotation(extensionContext.element, FeilerMedH√•ndterInntektsmeldingOppdelt::class.java).get().fordi
            println("üò≠ Fungerer ikke med oppdelt h√•ndtering av inntektsmelding $fordi")
        } else {
            invocation.proceed()
        }
    }
}